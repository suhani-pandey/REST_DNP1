@page "/CreateTodo" 
@using global::Shared
@using global::Shared.DTOs
@using HTTPClients.ClientInterfaces
@inject IUserService UserService;
@inject ITodoService TodoService;
@inject NavigationManager navMgr;
<h3>CreateTodo</h3>

<div class="card">
    @if (users == null)
    {
        <label>Loading users...</label>
    }
    else if (!users.Any())
    {
        <label>No users, you cannot create a Todo without assignee.</label>
    }
    else
    {
        <h3>Create Todo</h3>
        <div class="form-group field">
            <label>Title:</label>
            <input type="text" @bind="todoTitle"/>
        </div>
        <div class="form-group field">
            <label>Assignee:</label>
            <select @bind="selectedUserId">
                <option>Choose</option>
                @foreach (User user in users)
                {
                    <option value="@user.Id">@user.Username</option>
                }
            </select>
        </div>
        <div class="button-row">
            @if (!string.IsNullOrEmpty(msg))
            {
                <label style="color: red">@msg</label>
            }
            <button @onclick="Create" class="acceptbtn">Create</button>
        </div>
    }
</div>
@code {
    private IEnumerable<User>? users;
    private int? selectedUserId;
    private string todoTitle="";

    private string msg = "";


    protected override async Task OnInitializedAsync()// just fetches all Users from the server.
    {
        msg = "";
        try
        {
            users = await UserService.GetUsers();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task Create()
    {
        //method will first reset the msg
        //check if User and Title is set--we also do the same thing in server
        msg = "";
        if (selectedUserId==null)
        {
            msg = "You must select an assignee";
            return;
        }
        if (string.IsNullOrEmpty(todoTitle))
        {
            msg = "Title cannot be empty";
            return;
        }

        try
        {
            //catch any potential errors
            //display the message through the msg field
            TodoCreationDto dto = new((int)selectedUserId, todoTitle);
            await TodoService.CreateAsync(dto);
            navMgr.NavigateTo("/");//The argument ("/") is the URI of the page we want to display.
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

}